{"version":3,"sources":["PathFindingVisualizer/Navbar/Navbar.jsx","PathFindingVisualizer/Node/Node.jsx","PathFindingVisualizer/algorithms/dijkstra.js","PathFindingVisualizer/algorithms/dfs.js","PathFindingVisualizer/algorithms/bfs.js","PathFindingVisualizer/algorithms/aStar.js","PathFindingVisualizer/Grid/Grid.jsx","PathFindingVisualizer/algorithms/randomObstruction.js","PathFindingVisualizer/algorithms/randomConnection.js","PathFindingVisualizer/Toolbar/Toolbar.jsx","PathFindingVisualizer/Footer/Footer.jsx","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","index.js"],"names":["Navbar","state","isOpen","toggleCollapse","setState","className","color","dark","expand","style","marginLeft","marginRight","onClick","this","id","navbar","right","to","fab","icon","Component","Node","props","row","col","isFinish","isStart","isWall","weight","isVisited","isIncludedInPath","key","baseClassName","registerNode","onMouseDown","onMouseEnter","onMouseUp","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbours","node","grid","unvisitedNeighbours","neighbours","length","push","filter","neighbour","getUnvisitedNeighbours","previousNode","getNodesInShortestPathOrder","finishNode","shortestPath","currentNode","unshift","pushNeighboursToStack","stack","pushNeighboursToQueue","queue","isConsidered","heuristicDistance","x1","y1","x2","y2","Math","abs","Grid","createNode","startNode","Infinity","onReset","timeoutVisitedNodesInOrder","timeout","clearTimeout","timeoutNodesInShortestPathOrder","timeoutVisualization","isVisualizing","visualizationStopped","visitedNodesInOrderCurrentIndex","nodesInShortestPathOrderCurrentIndex","r","c","nodes","reset","canDrawMaze","rows","cols","speed","algorithms","selectedAlgorithm","registerGrid","bind","isMousePressed","draggingStart","draggingFinish","timeoutMazeNodes","mazeNodesCurrentIndex","visitedNodesInOrder","nodesInShortestPathOrder","mazeNodes","currentRow","initGrid","setIsVisited","wall","setIsWall","setIsIncludedInPath","animate","algorithm","animateMaze","setFinish","oisFinish","setStart","getIsWall","visualizeDijkstra","visualizeDFS","visualizeBFS","visualizeAStar","closestNode","shift","dijkstra","pop","dfs","bfs","console","log","aStar","visitedNodesInOrderIndex","nodesInShortestPathOrderIndex","k","i","setTimeout","maze","walls","f","floor","random","randomObstruction","j","parseInt","randomConnection","index","setIsIncludedInMaze","size","backgroundColor","map","rowIndex","display","nodeIndex","test","handleMouseDown","handleMouseEnter","handleMouseUp","Toolbar","onAlgorithmSelected","event","value","target","innerHTML","setAlgorithm","onMazeSelected","setMaze","selectedMaze","isVisualizeButtonDisabled","isAlgorithmDropdownDisabled","isMazeDropdownDisabled","isSpeedbarDisabled","onSpeedChange","setSpeed","onResume","isPaused","onPause","onVisualize","mazes","registerToolbar","selectedAlgo","controlbutton","disabled","marginTop","marginBottom","md","caret","basic","name","active","maxWidth","htmlFor","type","min","max","defaultValue","step","onChange","Footer","Date","getFullYear","href","PathFindingVisualizer","toolbar","setIsVisualizing","fluid","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fb0ca60.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  MDBIcon,\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBFormInline,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <MDBNavbar\r\n          className=\"\"\r\n          color=\"info-color\"\r\n          dark\r\n          expand=\"md\"\r\n          style={{ marginLeft: \"-15px\", marginRight: \"-15px\" }}\r\n        >\r\n          <MDBNavbarBrand>\r\n            <strong className=\"white-text\">Path Finding Visualizer</strong>\r\n          </MDBNavbarBrand>\r\n          <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n          <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n            <MDBNavbarNav right>\r\n              <MDBNavItem>\r\n                <MDBNavLink className=\"waves-effect waves-light\" to =\"https://www.linkedin.com/in/zaid-shaikh-a59aa9215/\">\r\n                  <MDBIcon fab icon=\"linkedin\" />\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink className=\"waves-effect waves-light\" to=\"https://twitter.com/knoxzaid1/\">\r\n                  <MDBIcon fab icon=\"twitter\" />\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n              <MDBNavItem>\r\n                <MDBNavLink\r\n                  className=\"waves-effect waves-light\"\r\n                  to=\"https://github.com/Zaid5775\"\r\n                >\r\n                  <MDBIcon fab icon=\"github\" />\r\n                </MDBNavLink>\r\n              </MDBNavItem>\r\n            </MDBNavbarNav>\r\n          </MDBCollapse>\r\n        </MDBNavbar>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { row, col, isFinish, isStart, isWall, isVisited, isIncludedInPath, weight, key } = this.props;\r\n    this.baseClassName = isFinish ? \"node-finish\" : isStart ? \"node-start\" : \"\";\r\n    this.className = this.baseClassName;\r\n    this.state = {\r\n      key: key,\r\n      row: row,\r\n      col: col,\r\n      isFinish: isFinish,\r\n      isStart: isStart,\r\n      isWall: isWall,\r\n      isVisited: false,\r\n      isIncludedInPath: false,\r\n      weight: weight,\r\n    };\r\n    this.props.registerNode(row, col, this);\r\n  }\r\n\r\n  setIsVisited(isVisited) {\r\n    if (isVisited) this.className = this.baseClassName + \" node-visited\";\r\n    else this.className = this.baseClassName;\r\n    this.setState({ isVisited: isVisited });\r\n  }\r\n\r\n  setIsWall(isWall) {\r\n    if (isWall) {\r\n      this.className = this.baseClassName + \" node-wall\";\r\n      this.setState({ isWall: isWall });\r\n    } else {\r\n      this.className = this.baseClassName;\r\n      this.setState({ isWall: isWall });\r\n    }\r\n  }\r\n\r\n  getIsWall() {\r\n    return this.state.isWall;\r\n  }\r\n\r\n  setStart(isStart) {\r\n    if (!isStart) this.baseClassName = \"\";\r\n    else this.baseClassName = \"node-start\";\r\n    this.className = this.baseClassName;\r\n    this.setState({ isStart: isStart });\r\n  }\r\n\r\n  setFinish(isFinish) {\r\n    if (!isFinish) this.baseClassName = \"\";\r\n    else this.baseClassName = \"node-finish\";\r\n    this.className = this.baseClassName;\r\n    this.setState({ isFinish: isFinish });\r\n  }\r\n\r\n  setIsIncludedInPath(isIncludedInPath) {\r\n    if (isIncludedInPath) this.className = this.baseClassName + \" node-shortest-path\";\r\n    this.setState({ isIncludedInPath: isIncludedInPath });\r\n  }\r\n\r\n  reset() {\r\n    this.className = this.baseClassName;\r\n    this.setState({\r\n      isWall: false,\r\n      isVisited: false,\r\n      isIncludedInPath: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { row, col, isWall, onMouseDown, onMouseEnter, onMouseUp } = this.props;\r\n    if (isWall) {\r\n      this.className = this.baseClassName + \" node-wall\";\r\n      //this.setState({ isWall: isWall });\r\n    }\r\n    return (\r\n      <div\r\n        className={`node ${this.className}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n  row: 0,\r\n  col: 0,\r\n};\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  while (unvisitedNodes.length > 0) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbours(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (const neighbour of unvisitedNeighbours) {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const { col, row } = node;\r\n  /*if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);*/\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const shortestPath = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    shortestPath.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return shortestPath;\r\n}\r\n","export default function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const stack = [];\r\n  stack.push(startNode);\r\n  while (stack.length > 0) {\r\n    let currentNode = stack.pop();\r\n    if (currentNode.isWall) continue;\r\n    currentNode.isVisited = true;\r\n    visitedNodesInOrder.push(currentNode);\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n    pushNeighboursToStack(currentNode, grid, stack);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursToStack(node, grid, stack) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (const neighbour of unvisitedNeighbours) {\r\n    neighbour.previousNode = node;\r\n    //neighbour.isConsidered = true;\r\n    stack.push(neighbour);\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const { col, row } = node;\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n","export default function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const queue = [];\r\n  queue.push(startNode);\r\n  var i = 0;\r\n  while (queue.length > 0) {\r\n    i++;\r\n    let currentNode = queue.shift();\r\n    if (currentNode.isWall) continue;\r\n    currentNode.isVisited = true;\r\n    visitedNodesInOrder.push(currentNode);\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n    pushNeighboursToQueue(currentNode, grid, queue);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction pushNeighboursToQueue(node, grid, queue) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (const neighbour of unvisitedNeighbours) {\r\n    neighbour.previousNode = node;\r\n    neighbour.isConsidered = true;\r\n    queue.push(neighbour);\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const { col, row } = node;\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited && !neighbour.isConsidered);\r\n}\r\n","export default function aStar(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  startNode.heuristicDistance = 0;\r\n  const unvisitedNodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  while (unvisitedNodes.length > 0) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    let closestNode = unvisitedNodes.shift();\r\n    console.log(closestNode);\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbours(closestNode, grid, finishNode);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.heuristicDistance - nodeB.heuristicDistance);\r\n  //nodeA.distance + nodeA.heuristicDistance - (nodeB.distance + nodeB.heuristicDistance)\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid, finishNode) {\r\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (const neighbour of unvisitedNeighbours) {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.heuristicDistance = getManhattanDistance(\r\n      neighbour.row,\r\n      neighbour.col,\r\n      finishNode.row,\r\n      finishNode.col\r\n    );\r\n    neighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const { col, row } = node;\r\n  /*if (row > 0) neighbours.push(grid[row - 1][col]);\r\n      if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n      if (col > 0) neighbours.push(grid[row][col - 1]);\r\n      if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);*/\r\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col > 0) neighbours.push(grid[row][col - 1]);\r\n  if (row > 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction getManhattanDistance(x1, y1, x2, y2) {\r\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2);\r\n}\r\n\r\nfunction getDiagonalDistance(x1, y1, x2, y2) {\r\n  return Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2));\r\n}\r\n\r\nfunction getEuclideanDistance(x1, y1, x2, y2) {\r\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\r\n}\r\n","import reactDom from \"react-dom\";\r\nimport React, { Component } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport \"../PathFindingVisualizer.css\";\r\nimport Node from \"../Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport dfs from \"../algorithms/dfs\";\r\nimport bfs from \"../algorithms/bfs\";\r\nimport aStar from \"../algorithms/aStar\";\r\nimport randomObstruction from \"../algorithms/randomObstruction\";\r\nimport randomConnection from \"../algorithms/randomConnection\";\r\n\r\nexport default class Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n    };\r\n    this.nodes = [];\r\n    this.grid = [];\r\n    this.rows = 24;\r\n    this.cols = 50;\r\n    this.speed = 15;\r\n    this.startNode = { row: 12, col: 15 };\r\n    this.finishNode = { row: 12, col: 35 };\r\n    this.algorithms = [];\r\n    this.selectedAlgorithm = \"Dijkstra\";\r\n    this.props.registerGrid(this);\r\n    this.registerNode = this.registerNode.bind(this);\r\n    this.isMousePressed = false;\r\n    this.draggingStart = false;\r\n    this.draggingFinish = false;\r\n    this.timeoutVisitedNodesInOrder = [];\r\n    this.timeoutNodesInShortestPathOrder = [];\r\n    this.timeoutMazeNodes = [];\r\n    this.timeoutVisualization = null;\r\n    this.visitedNodesInOrderCurrentIndex = 0;\r\n    this.nodesInShortestPathOrderCurrentIndex = 0;\r\n    this.mazeNodesCurrentIndex = 0;\r\n    this.visitedNodesInOrder = [];\r\n    this.nodesInShortestPathOrder = [];\r\n    this.mazeNodes = [];\r\n    this.isVisualizing = false;\r\n    this.canDrawMaze = true;\r\n  }\r\n\r\n  //Init\r\n  componentDidMount() {\r\n    this.nodes = [];\r\n    for (let row = 0; row < this.rows; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < this.cols; col++) {\r\n        const currentNode = [];\r\n        currentRow.push(currentNode);\r\n      }\r\n      this.nodes.push(currentRow);\r\n    }\r\n    this.initGrid();\r\n  }\r\n\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart: row === this.startNode.row && col === this.startNode.col,\r\n      isFinish: row === this.finishNode.row && col === this.finishNode.col,\r\n      distance: Infinity,\r\n      heuristicDistance: Infinity,\r\n      isVisited: false,\r\n      isConsidered: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n    };\r\n  };\r\n\r\n  initGrid() {\r\n    const nodes = [];\r\n    for (let row = 0; row < this.rows; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < this.cols; col++) {\r\n        const currentNode = this.createNode(row, col);\r\n        currentRow.push(currentNode);\r\n      }\r\n      nodes.push(currentRow);\r\n    }\r\n    this.grid = nodes;\r\n    this.setState({ grid: nodes });\r\n  }\r\n\r\n  //setters\r\n  registerNode(row, col, node) {\r\n    this.nodes[row][col] = node;\r\n  }\r\n\r\n  setIsVisited(node) {\r\n    return () => {\r\n      this.visitedNodesInOrderCurrentIndex++;\r\n      this.nodes[node.row][node.col].setIsVisited(true);\r\n    };\r\n  }\r\n\r\n  setIsWall(wall) {\r\n    if (\r\n      (wall.row != this.startNode.row || wall.col != this.startNode.col) &&\r\n      (wall.row != this.finishNode.row || wall.col != this.finishNode.col)\r\n    )\r\n      return () => {\r\n        this.grid[wall.row][wall.col].isWall = true;\r\n        this.nodes[wall.row][wall.col].setIsWall(true);\r\n      };\r\n  }\r\n\r\n  setIsIncludedInMaze(wall) {\r\n    if (\r\n      (wall.row != this.startNode.row || wall.col != this.startNode.col) &&\r\n      (wall.row != this.finishNode.row || wall.col != this.finishNode.col)\r\n    )\r\n      return () => {\r\n        this.mazeNodesCurrentIndex++;\r\n        this.grid[wall.row][wall.col].isWall = true;\r\n        this.nodes[wall.row][wall.col].setIsWall(true);\r\n      };\r\n  }\r\n  setIsIncludedInPath(node) {\r\n    return () => {\r\n      this.nodesInShortestPathOrderCurrentIndex++;\r\n      this.nodes[node.row][node.col].setIsIncludedInPath(true);\r\n    };\r\n  }\r\n\r\n  setSpeed(speed) {\r\n    this.speed = speed == 1 ? 40 : speed == 2 ? 20 : speed == 3 ? 15 : 10;\r\n    if (this.isVisualizing) {\r\n      if (this.timeoutVisitedNodesInOrder.length) {\r\n        for (let timeout of this.timeoutVisitedNodesInOrder) clearTimeout(timeout);\r\n        for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n        clearTimeout(this.timeoutVisualization);\r\n      } else if (this.timeoutNodesInShortestPathOrder.length) {\r\n        for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n        clearTimeout(this.timeoutVisualization);\r\n        this.isVisualizing = false;\r\n      } else if (this.timeoutMazeNodes.length) {\r\n        for (let timeout of this.timeoutMazeNodes) clearTimeout(timeout);\r\n        clearTimeout(this.timeoutVisualization);\r\n        this.isVisualizing = false;\r\n      }\r\n      this.timeoutVisitedNodesInOrder = [];\r\n      this.timeoutNodesInShortestPathOrder = [];\r\n      this.animate(\r\n        this.visitedNodesInOrder,\r\n        this.visitedNodesInOrderCurrentIndex,\r\n        this.nodesInShortestPathOrder,\r\n        this.nodesInShortestPathOrderCurrentIndex\r\n      );\r\n    }\r\n  }\r\n\r\n  setAlgorithm(algorithm) {\r\n    this.selectedAlgorithm = algorithm;\r\n    this.setState({ selectedAlgorithm: algorithm });\r\n  }\r\n\r\n  /*sleep(milliseconds) {\r\n    const date = Date.now();\r\n    let currentDate = null;\r\n    do {\r\n      currentDate = Date.now();\r\n    } while (currentDate - date < milliseconds);\r\n  }*/\r\n\r\n  //listeners\r\n  onReset = () => {\r\n    if (this.timeoutVisitedNodesInOrder.length) {\r\n      for (let timeout of this.timeoutVisitedNodesInOrder) clearTimeout(timeout);\r\n      for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.isVisualizing = false;\r\n      this.visualizationStopped();\r\n    } else if (this.timeoutNodesInShortestPathOrder.length) {\r\n      for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.isVisualizing = false;\r\n      this.visualizationStopped();\r\n    }\r\n    this.visitedNodesInOrderCurrentIndex = 0;\r\n    this.nodesInShortestPathOrderCurrentIndex = 0;\r\n    this.timeoutVisitedNodesInOrder = [];\r\n    this.timeoutNodesInShortestPathOrder = [];\r\n    let r = 0,\r\n      c = 0;\r\n    for (const row of this.nodes) {\r\n      c = 0;\r\n      for (const node of row) {\r\n        node.reset();\r\n        this.grid[r][c].isWall = false;\r\n        c++;\r\n      }\r\n      r++;\r\n    }\r\n    this.setState({\r\n      grid: this.grid,\r\n    });\r\n  };\r\n\r\n  onPause() {\r\n    if (this.timeoutVisitedNodesInOrder.length) {\r\n      for (let timeout of this.timeoutVisitedNodesInOrder) clearTimeout(timeout);\r\n      for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.visualizationStopped();\r\n      this.isVisualizing = false;\r\n    } else if (this.timeoutNodesInShortestPathOrder.length) {\r\n      for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.visualizationStopped();\r\n      this.isVisualizing = false;\r\n    } else if (this.mazeNodes.length) {\r\n      for (let timeout of this.timeoutMazeNodes) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.visualizationStopped();\r\n      this.isVisualizing = false;\r\n    }\r\n    this.timeoutVisitedNodesInOrder = [];\r\n    this.timeoutNodesInShortestPathOrder = [];\r\n    this.timeoutMazeNodes = [];\r\n  }\r\n\r\n  onResume() {\r\n    if (this.visitedNodesInOrder.length || this.nodesInShortestPathOrder.length)\r\n      this.animate(\r\n        this.visitedNodesInOrder,\r\n        this.visitedNodesInOrderCurrentIndex,\r\n        this.nodesInShortestPathOrder,\r\n        this.nodesInShortestPathOrderCurrentIndex\r\n      );\r\n    else if (this.mazeNodes.length) {\r\n      this.animateMaze(this.mazeNodes, this.mazeNodesCurrentIndex);\r\n    }\r\n  }\r\n\r\n  //Mouse listeners\r\n  handleMouseDown(row, col) {\r\n    if (this.canDrawMaze) {\r\n      this.isMousePressed = true;\r\n      if (row == this.startNode.row && col == this.startNode.col) {\r\n        this.draggingStart = true;\r\n      } else if (row == this.finishNode.row && col == this.finishNode.col) {\r\n        this.draggingFinish = true;\r\n      } else {\r\n        if (this.grid[row][col].isWall) {\r\n          this.grid[row][col].isWall = false;\r\n          this.nodes[row][col].setIsWall(false);\r\n        } else {\r\n          this.grid[row][col].isWall = true;\r\n          this.nodes[row][col].setIsWall(true);\r\n        }\r\n      }\r\n    }\r\n    //this.setState({ grid: this.grid });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.isMousePressed) {\r\n      if (this.draggingStart && (row != this.finishNode.row || col != this.finishNode.col)) {\r\n        this.nodes[this.startNode.row][this.startNode.col].setStart(false);\r\n        this.grid[this.startNode.row][this.startNode.col].isStart = false;\r\n        this.startNode.row = row;\r\n        this.startNode.col = col;\r\n        this.nodes[this.startNode.row][this.startNode.col].setStart(true);\r\n        this.grid[this.startNode.row][this.startNode.col].isStart = true;\r\n      } else if (this.draggingFinish && (this.startNode.row != row || this.startNode.col != col)) {\r\n        this.nodes[this.finishNode.row][this.finishNode.col].setFinish(false);\r\n        this.grid[this.finishNode.row][this.finishNode.col].isFinish = false;\r\n        this.finishNode.row = row;\r\n        this.finishNode.col = col;\r\n        this.nodes[this.finishNode.row][this.finishNode.col].setFinish(true);\r\n        this.grid[this.finishNode.row][this.finishNode.col].oisFinish = true;\r\n      } else {\r\n        if (\r\n          (row != this.startNode.row && col != this.startNode.col) ||\r\n          (row != this.finishNode.row && col != this.finishNode.col)\r\n        ) {\r\n          this.grid[row][col].isWall = true;\r\n          this.nodes[row][col].setIsWall(true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.isMousePressed = false;\r\n    this.draggingFinish = false;\r\n    this.draggingStart = false;\r\n  }\r\n\r\n  visualizationStopped = () => {\r\n    this.canDrawMaze = true;\r\n    this.isVisualizing = false;\r\n    this.props.visualizationStopped();\r\n  };\r\n\r\n  onVisualize() {\r\n    this.canDrawMaze = false;\r\n    if (this.timeoutVisitedNodesInOrder.length) {\r\n      for (let timeout of this.timeoutVisitedNodesInOrder) clearTimeout(timeout);\r\n      for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.visitedNodesInOrderCurrentIndex = 0;\r\n      this.nodesInShortestPathOrderCurrentIndex = 0;\r\n      if (this.isVisualizing) this.visualizationStopped();\r\n      this.isVisualizing = true;\r\n    } else if (this.timeoutNodesInShortestPathOrder.length) {\r\n      for (let timeout of this.timeoutNodesInShortestPathOrder) clearTimeout(timeout);\r\n      clearTimeout(this.timeoutVisualization);\r\n      this.visitedNodesInOrderCurrentIndex = 0;\r\n      this.nodesInShortestPathOrderCurrentIndex = 0;\r\n      if (this.isVisualizing) this.visualizationStopped();\r\n      this.isVisualizing = true;\r\n    }\r\n    const grid = this.grid;\r\n    const startNode = grid[this.startNode.row][this.startNode.col];\r\n    const finishNode = grid[this.finishNode.row][this.finishNode.col];\r\n    for (const row of this.grid) {\r\n      for (const node of row) {\r\n        node.distance = Infinity;\r\n        node.heuristicDistance = Infinity;\r\n        node.isVisited = false;\r\n        node.isConsidered = false;\r\n        node.previousNode = null;\r\n      }\r\n    }\r\n    for (const row of this.nodes) {\r\n      for (const node of row) {\r\n        if (!node.getIsWall()) node.setIsVisited(false);\r\n      }\r\n    }\r\n    if (this.selectedAlgorithm === \"Dijkstra\") {\r\n      this.visualizeDijkstra();\r\n    } else if (this.selectedAlgorithm === \"DFS\") {\r\n      this.visualizeDFS();\r\n    } else if (this.selectedAlgorithm === \"BFS\") {\r\n      this.visualizeBFS();\r\n    } else if (this.selectedAlgorithm === \"A*\") {\r\n      this.visualizeAStar();\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const grid = this.grid;\r\n    const startNode = grid[this.startNode.row][this.startNode.col];\r\n    const finishNode = grid[this.finishNode.row][this.finishNode.col];\r\n    const visitedNodesInOrder = dijkstra(this.grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.visitedNodesInOrder = visitedNodesInOrder;\r\n    this.nodesInShortestPathOrder = nodesInShortestPathOrder;\r\n    this.visitedNodesInOrderCurrentIndex = 0;\r\n    this.nodesInShortestPathOrderCurrentIndex = 0;\r\n    this.animate(visitedNodesInOrder, 0, nodesInShortestPathOrder, 0);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    const grid = this.grid;\r\n    const startNode = grid[this.startNode.row][this.startNode.col];\r\n    const finishNode = grid[this.finishNode.row][this.finishNode.col];\r\n    const visitedNodesInOrder = dfs(this.grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.visitedNodesInOrder = visitedNodesInOrder;\r\n    this.nodesInShortestPathOrder = nodesInShortestPathOrder;\r\n    this.visitedNodesInOrderCurrentIndex = 0;\r\n    this.nodesInShortestPathOrderCurrentIndex = 0;\r\n    this.animate(visitedNodesInOrder, 0, nodesInShortestPathOrder, 0);\r\n  }\r\n\r\n  visualizeBFS() {\r\n    const grid = this.grid;\r\n    const startNode = grid[this.startNode.row][this.startNode.col];\r\n    const finishNode = grid[this.finishNode.row][this.finishNode.col];\r\n    const visitedNodesInOrder = bfs(this.grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.visitedNodesInOrder = visitedNodesInOrder;\r\n    this.nodesInShortestPathOrder = nodesInShortestPathOrder;\r\n    this.visitedNodesInOrderCurrentIndex = 0;\r\n    this.nodesInShortestPathOrderCurrentIndex = 0;\r\n    this.animate(visitedNodesInOrder, 0, nodesInShortestPathOrder, 0);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    const grid = this.grid;\r\n    const startNode = grid[this.startNode.row][this.startNode.col];\r\n    const finishNode = grid[this.finishNode.row][this.finishNode.col];\r\n    const visitedNodesInOrder = aStar(this.grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.visitedNodesInOrder = visitedNodesInOrder;\r\n    this.nodesInShortestPathOrder = nodesInShortestPathOrder;\r\n    this.visitedNodesInOrderCurrentIndex = 0;\r\n    this.nodesInShortestPathOrderCurrentIndex = 0;\r\n    this.animate(visitedNodesInOrder, 0, nodesInShortestPathOrder, 0);\r\n  }\r\n\r\n  animate(\r\n    visitedNodesInOrder,\r\n    visitedNodesInOrderIndex,\r\n    nodesInShortestPathOrder,\r\n    nodesInShortestPathOrderIndex\r\n  ) {\r\n    let k = 1;\r\n    this.timeoutVisitedNodesInOrder = [];\r\n    this.timeoutNodesInShortestPathOrder = [];\r\n    this.timeoutVisualization = null;\r\n    for (let i = visitedNodesInOrderIndex; i < visitedNodesInOrder.length; i++) {\r\n      const node = visitedNodesInOrder[i];\r\n      this.timeoutVisitedNodesInOrder.push(setTimeout(this.setIsVisited(node), this.speed * k++));\r\n    }\r\n    for (let i = nodesInShortestPathOrderIndex; i < nodesInShortestPathOrder.length; i++) {\r\n      const node = nodesInShortestPathOrder[i];\r\n      this.timeoutNodesInShortestPathOrder.push(setTimeout(this.setIsIncludedInPath(node), this.speed * k++));\r\n    }\r\n    this.timeoutVisualization = setTimeout(this.visualizationStopped, this.speed * k++);\r\n  }\r\n\r\n  setMaze(maze) {\r\n    this.isVisualizing = true;\r\n    if (maze === \"Random Obstruction\") {\r\n      this.mazeNodes = randomObstruction(this.grid);\r\n      this.mazeNodesCurrentIndex = 0;\r\n      this.animateMaze(this.mazeNodes, 0);\r\n    } else if (maze === \"Random Connection\") {\r\n      this.mazeNodes = randomConnection(this.grid);\r\n      this.mazeNodesCurrentIndex = 0;\r\n      this.animateMaze(this.mazeNodes, 0);\r\n    }\r\n  }\r\n\r\n  animateMaze(walls, index) {\r\n    let k = 1;\r\n    for (let i = index; i < walls.length; i++) {\r\n      const wall = walls[i];\r\n      this.timeoutMazeNodes.push(setTimeout(this.setIsIncludedInMaze(wall), this.speed * k++));\r\n    }\r\n    this.timeoutVisualization = setTimeout(this.visualizationStopped, this.speed * k++);\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <MDBRow>\r\n        <MDBCol size=\"12\">\r\n          <div className=\"border border-info z-depth-2\" style={{ backgroundColor: \"white\" }}>\r\n            {grid.map((row, rowIndex) => {\r\n              return (\r\n                <div style={{ display: \"flex\" }} key={rowIndex}>\r\n                  {row.map((node, nodeIndex) => {\r\n                    const { row, col, isWall, isStart, isFinish } = node;\r\n                    return (\r\n                      <Node\r\n                        row={row}\r\n                        col={col}\r\n                        key={nodeIndex}\r\n                        isStart={isStart}\r\n                        isFinish={isFinish}\r\n                        isWall={isWall}\r\n                        test={\"foo\"}\r\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)} //alterative to binding\r\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)} //alternative to binding\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        registerNode={this.registerNode}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    );\r\n  }\r\n}\r\n","export default function randomObstruction(grid) {\r\n  const walls = [];\r\n  const nodes = [];\r\n  for (const row of grid) for (const node of row) nodes.push(node);\r\n  let i = 0;\r\n  while (i < 1000) {\r\n    walls.push(nodes[i]);\r\n    i = i + Math.floor(Math.random() * 5 + 1);\r\n  }\r\n  return walls;\r\n}\r\n","export default function randomConnection(grid) {\r\n  const walls = [];\r\n  const nodes = [];\r\n  for (const row of grid) for (const node of row) nodes.push(node);\r\n  let i = 0;\r\n  let j = 0;\r\n  while (i < 20) {\r\n    j = 0;\r\n    while (j < 50) {\r\n      walls.push(grid[i][j]);\r\n      grid[i][j].isWall = true;\r\n      j += 2;\r\n    }\r\n    i += 2;\r\n  }\r\n  i = 0;\r\n  while (i < 1000) {\r\n    let j = parseInt(i / 50);\r\n    let k = i % 50;\r\n    console.log(j, k);\r\n    if (j > 0 && j < 19 && k > 0 && k < 49) {\r\n      if (grid[j - 1][k].isWall || grid[j][k - 1].isWall || grid[j + 1][k].isWall || grid[j][k + 1].isWall)\r\n        walls.push(nodes[i]);\r\n    }\r\n    i = i + Math.floor(Math.random() * 4 + 1);\r\n  }\r\n  return walls;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  MDBBtn,\r\n  MDBBtnGroup,\r\n  MDBIcon,\r\n  MDBCol,\r\n  MDBRow,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n  MDBRangeInput,\r\n} from \"mdbreact\";\r\n\r\nexport default class Toolbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      algorithms: [\"BFS\", \"DFS\", \"Dijkstra\", \"A*\"],\r\n      selectedAlgorithm: \"Dijkstra\",\r\n      mazes: [\"Random Obstruction\", \"Random Connection\"],\r\n      selectedMaze: \"\",\r\n      isVisualizing: false,\r\n      isPaused: false,\r\n      isAlgorithmDropdownDisabled: false,\r\n      isMazeDropdownDisabled: false,\r\n      isVisualizeButtonDisabled: false,\r\n      isSpeedbarDisabled: false,\r\n    };\r\n    this.selectedAlgorithm = \"Dijkstra\";\r\n    this.props.registerToolbar(this);\r\n  }\r\n\r\n  componentDidUpdate() {}\r\n\r\n  onAlgorithmSelected = (event) => {\r\n    const value = event.target.innerHTML;\r\n    this.props.setAlgorithm(value);\r\n    this.selectedAlgorithm = value;\r\n    this.setState({ selectedAlgorithm: value });\r\n  };\r\n\r\n  onMazeSelected = (event) => {\r\n    const value = event.target.innerHTML;\r\n    this.props.setMaze(value);\r\n    this.setState({\r\n      selectedMaze: value,\r\n      isVisualizing: true,\r\n      isVisualizeButtonDisabled: true,\r\n      isAlgorithmDropdownDisabled: true,\r\n      isMazeDropdownDisabled: true,\r\n      isSpeedbarDisabled: true,\r\n    });\r\n  };\r\n\r\n  onSpeedChange = (event) => {\r\n    const value = event.target.value;\r\n    this.props.setSpeed(value);\r\n  };\r\n\r\n  onResume = () => {\r\n    this.props.onResume();\r\n    this.setState({\r\n      isPaused: false,\r\n      isVisualizing: true,\r\n      isVisualizeButtonDisabled: true,\r\n      isAlgorithmDropdownDisabled: true,\r\n      isMazeDropdownDisabled: true,\r\n      isSpeedbarDisabled: true,\r\n    });\r\n  };\r\n\r\n  onPause = () => {\r\n    this.props.onPause();\r\n    this.setState({\r\n      isPaused: true,\r\n    });\r\n  };\r\n\r\n  onReset = () => {\r\n    this.props.onReset();\r\n    this.setState({\r\n      selectedMaze: \"\",\r\n      isPaused: false,\r\n      isVisualizing: false,\r\n      isVisualizeButtonDisabled: false,\r\n      isAlgorithmDropdownDisabled: false,\r\n      isMazeDropdownDisabled: false,\r\n      isSpeedbarDisabled: false,\r\n    });\r\n  };\r\n\r\n  onVisualize = () => {\r\n    //alert(\"onVisualize\");\r\n    this.props.onVisualize();\r\n    this.setState({\r\n      isVisualizing: true,\r\n      isVisualizeButtonDisabled: true,\r\n      isAlgorithmDropdownDisabled: true,\r\n      isMazeDropdownDisabled: true,\r\n      isSpeedbarDisabled: true,\r\n    });\r\n  };\r\n\r\n  setIsVisualizing(isVisualizing) {\r\n    //throw new Error(\"kuch bhi\");\r\n    if (isVisualizing) {\r\n      this.setState({\r\n        isVisualizing: true,\r\n        isVisualizeButtonDisabled: true,\r\n        isAlgorithmDropdownDisabled: true,\r\n        isMazeDropdownDisabled: true,\r\n        isSpeedbarDisabled: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isVisualizing: isVisualizing,\r\n        isVisualizeButtonDisabled: false,\r\n        isAlgorithmDropdownDisabled: false,\r\n        isMazeDropdownDisabled: false,\r\n        isSpeedbarDisabled: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const selectedAlgo = this.selectedAlgorithm;\r\n    const selectedMaze = this.state.selectedMaze;\r\n    const onAlgorithmSelected = this.onAlgorithmSelected;\r\n    const onMazeSelected = this.onMazeSelected;\r\n    const state = this.state;\r\n    let controlbutton = null;\r\n    if (!this.state.isVisualizing && !this.state.isPaused) {\r\n      controlbutton = (\r\n        <MDBBtn key=\"PauseButtonDisabled\" color=\"warning\" disabled>\r\n          Pause\r\n        </MDBBtn>\r\n      );\r\n    } else if (this.state.isVisualizing && !this.state.isPaused) {\r\n      controlbutton = (\r\n        <MDBBtn key=\"PauseButton\" color=\"warning\" onClick={this.onPause}>\r\n          Pause\r\n        </MDBBtn>\r\n      );\r\n    } else if (!this.state.isVisualizing && this.state.isPaused) {\r\n      controlbutton = (\r\n        <MDBBtn key=\"ResumeButton\" color=\"success\" onClick={this.onResume}>\r\n          Resume\r\n        </MDBBtn>\r\n      );\r\n    }\r\n    return (\r\n      <MDBRow style={{ marginTop: \"10px\", marginBottom: \"-5px\" }}>\r\n        <MDBCol md=\"3\" className=\"text-center\">\r\n          <MDBDropdown>\r\n            <MDBDropdownToggle\r\n              disabled={state.isAlgorithmDropdownDisabled}\r\n              key=\"AlgorithmDropdown\"\r\n              caret\r\n              color=\"primary\"\r\n            >\r\n              Algorithm: {this.state.selectedAlgorithm}\r\n            </MDBDropdownToggle>\r\n            <MDBDropdownMenu basic>\r\n              {this.state.algorithms.map(function (name, index) {\r\n                if (selectedAlgo === name)\r\n                  return (\r\n                    <MDBDropdownItem\r\n                      key={name}\r\n                      onClick={onAlgorithmSelected}\r\n                      disabled={state.isAlgorithmDropdownDisabled}\r\n                      active\r\n                    >\r\n                      {name}\r\n                    </MDBDropdownItem>\r\n                  );\r\n                else\r\n                  return (\r\n                    <MDBDropdownItem\r\n                      key={name}\r\n                      disabled={state.isAlgorithmDropdownDisabled}\r\n                      onClick={onAlgorithmSelected}\r\n                    >\r\n                      {name}\r\n                    </MDBDropdownItem>\r\n                  );\r\n              })}\r\n            </MDBDropdownMenu>\r\n          </MDBDropdown>\r\n        </MDBCol>\r\n        <MDBCol md=\"2\" className=\"text-center\">\r\n          <MDBRow style={{ maxWidth: \"220px\" }}>\r\n            <MDBCol md=\"12\" className=\"text-center\">\r\n              <MDBRow>\r\n                <label htmlFor=\"speed\" className=\"blue-text\"></label>\r\n                <MDBCol md=\"3\" className=\"text-center\">\r\n                  <span className=\"font-weight-light blue-text mr-4\">0.5x</span>\r\n                </MDBCol>\r\n                <MDBCol md=\"3\" className=\"text-center\">\r\n                  <span className=\"font-weight-light blue-text mr-4\">1x</span>\r\n                </MDBCol>\r\n                <MDBCol md=\"3\" className=\"text-center\">\r\n                  <span className=\"font-weight-light blue-text mr-4\">1.5x</span>\r\n                </MDBCol>\r\n                <MDBCol md=\"3\">\r\n                  <span className=\"font-weight-light blue-text ml-2\">2x</span>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBCol>\r\n            <MDBCol md=\"12\" disabled className=\"text-center\">\r\n              <input\r\n                key=\"Speedbar\"\r\n                type=\"range\"\r\n                //disabled={state.isSpeedbarDisabled}\r\n                className=\"custom-range\"\r\n                id=\"speed\"\r\n                min=\"1\"\r\n                max=\"4\"\r\n                defaultValue=\"2\"\r\n                step=\"1\"\r\n                onChange={this.onSpeedChange}\r\n              />\r\n            </MDBCol>\r\n          </MDBRow>\r\n        </MDBCol>\r\n        <MDBCol md=\"4\" className=\"text-center\">\r\n          <MDBBtnGroup className=\"mb-4\">\r\n            <MDBBtn\r\n              key=\"VisualizeButton\"\r\n              disabled={state.isVisualizeButtonDisabled}\r\n              color=\"primary\"\r\n              onClick={this.onVisualize}\r\n            >\r\n              Visualize\r\n            </MDBBtn>\r\n            {controlbutton}\r\n            <MDBBtn key=\"ResetButton\" color=\"danger\" onClick={this.onReset}>\r\n              Reset\r\n            </MDBBtn>\r\n          </MDBBtnGroup>\r\n        </MDBCol>\r\n        <MDBCol md=\"3\" className=\"text-center\">\r\n          <MDBDropdown>\r\n            <MDBDropdownToggle\r\n              disabled={state.isMazeDropdownDisabled}\r\n              key=\"MazeDropdown\"\r\n              caret\r\n              color=\"primary\"\r\n            >\r\n              Maze: {this.state.selectedMaze}\r\n            </MDBDropdownToggle>\r\n            <MDBDropdownMenu basic>\r\n              {this.state.mazes.map(function (name, index) {\r\n                if (selectedMaze === name)\r\n                  return (\r\n                    <MDBDropdownItem\r\n                      key={name}\r\n                      disabled={state.isMazeDropdownDisabled}\r\n                      onClick={onMazeSelected}\r\n                      active\r\n                    >\r\n                      {name}\r\n                    </MDBDropdownItem>\r\n                  );\r\n                else\r\n                  return (\r\n                    <MDBDropdownItem\r\n                      key={name}\r\n                      disabled={state.isMazeDropdownDisabled}\r\n                      onClick={onMazeSelected}\r\n                    >\r\n                      {name}\r\n                    </MDBDropdownItem>\r\n                  );\r\n              })}\r\n            </MDBDropdownMenu>\r\n          </MDBDropdown>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { MDBCol, MDBRow } from \"mdbreact\";\r\n\r\nexport default class Footer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MDBRow>\r\n        <MDBCol\r\n          size=\"12\"\r\n          className=\"font-small pt-4 mt-4 text-center py-3\"\r\n          style={{ backgroundColor: \"#e0e0e0\" }}\r\n        >\r\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"#\"> Zaid Shaikh </a>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    );\r\n  }\r\n}\r\n","import reactDom from \"react-dom\";\r\nimport React, { Component } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBFooter, MDBBtn } from \"mdbreact\";\r\nimport \"./PathFindingVisualizer.css\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport Grid from \"./Grid/Grid\";\r\nimport Toolbar from \"./Toolbar/Toolbar\";\r\nimport Footer from \"./Footer/Footer\";\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.registerGrid = this.registerGrid.bind(this);\r\n    this.onVisualize = this.onVisualize.bind(this);\r\n    this.onPause = this.onPause.bind(this);\r\n    this.onResume = this.onResume.bind(this);\r\n    this.onReset = this.onReset.bind(this);\r\n    this.setAlgorithm = this.setAlgorithm.bind(this);\r\n    this.setMaze = this.setMaze.bind(this);\r\n    this.setSpeed = this.setSpeed.bind(this);\r\n    this.visualizationStopped = this.visualizationStopped.bind(this);\r\n  }\r\n\r\n  registerGrid(grid) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  registerToolbar = (toolbar) => {\r\n    this.toolbar = toolbar;\r\n  };\r\n\r\n  visualizationStopped() {\r\n    this.toolbar.setIsVisualizing(false);\r\n  }\r\n\r\n  onVisualize() {\r\n    this.grid.onVisualize();\r\n  }\r\n\r\n  onReset() {\r\n    this.grid.onReset();\r\n  }\r\n\r\n  onPause() {\r\n    this.grid.onPause();\r\n  }\r\n\r\n  onResume() {\r\n    this.grid.onResume();\r\n  }\r\n\r\n  setSpeed(speed) {\r\n    this.grid.setSpeed(speed);\r\n  }\r\n\r\n  setAlgorithm(algorithm) {\r\n    this.grid.setAlgorithm(algorithm);\r\n  }\r\n\r\n  setMaze(maze) {\r\n    this.grid.setMaze(maze);\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer fluid className=\"cloudy-knoxville-gradient\">\r\n        <Navbar></Navbar>\r\n        <Toolbar\r\n          onVisualize={this.onVisualize}\r\n          onReset={this.onReset}\r\n          onPause={this.onPause}\r\n          onResume={this.onResume}\r\n          setAlgorithm={this.setAlgorithm}\r\n          setMaze={this.setMaze}\r\n          setSpeed={this.setSpeed}\r\n          registerToolbar={this.registerToolbar}\r\n        ></Toolbar>\r\n        <Grid registerGrid={this.registerGrid} visualizationStopped={this.visualizationStopped}></Grid>\r\n        <Footer></Footer>\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nfunction App() {\r\n  return <PathFindingVisualizer></PathFindingVisualizer>;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}